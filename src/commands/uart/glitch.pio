;
;
;

.program uart_glitch

jump_target:
    set pins 1 [10]
    ;set pins 0 [9]
    jmp jump_target

;.wrap_target
;set x 31
;set y 2

;return_loop:
;    wait 0 pin 0
;    wait 1 pin 0
;    jmp y-- return_loop
;    set pins 1

;high_loop:
;    jmp x-- high_loop
;    set pins 0

;.wrap

% c-sdk {
#include "hardware/clocks.h"
static inline void uart_glitch_program_init(PIO pio, uint sm, uint offset, uint glitch_pin/*, uint tx_pin*/) {
    pio_sm_config c = uart_glitch_program_get_default_config(offset);

    sm_config_set_set_pins (&c, glitch_pin, 1);
    pio_gpio_init(pio, glitch_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, glitch_pin, 1, true);

    //sm_config_set_in_pins (pio, tx_pin);

    float div = clock_get_hz(clk_sys) / (10000.0);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    
    pio_sm_set_enabled(pio, sm, true);
}
%}