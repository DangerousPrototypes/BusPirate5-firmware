# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bpio

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatusRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatusRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatusRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatusRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatusRequest
    def Query(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StatusRequest
    def QueryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # StatusRequest
    def QueryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatusRequest
    def QueryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def StatusRequestStart(builder):
    builder.StartObject(1)

def Start(builder):
    StatusRequestStart(builder)

def StatusRequestAddQuery(builder, query):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(query), 0)

def AddQuery(builder, query):
    StatusRequestAddQuery(builder, query)

def StatusRequestStartQueryVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartQueryVector(builder, numElems):
    return StatusRequestStartQueryVector(builder, numElems)

def StatusRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return StatusRequestEnd(builder)
