namespace BPIO2;

//new tables to query device status, select and configure a mode, enable power, etc.
table StatusResponse {
  //HW version
  //FW version
  modes:[Mode]; // List of modes available on the device.
}

table Mode{
  id:uint8; // Unique ID for the mode.
  name:string; // Name of the mode.
}

//use one or the other
table StatusRequest{
  id:uint8; // ID of the mode to query.
  name:string; // Mode enter, none for mode query.
  //mode spefific configuation union
}

table I2CRWRequest {
  i2cstart:bool=true; // Start condition.
  i2caddr:ubyte; // Device address (Bus Pirate automatically will set read/write bit)
  i2cdata:[ubyte]; // Data to write
  i2creadbytes:uint32; // Number of bytes to read.
  i2cstop:bool=true; // Stop condition.
}

table I2CResponse {
  data:[ubyte]; // Data read from device
  error_message:string; // Error message if any.
}
/*
enum PacketType:uint8 {
  I2CRWRequest = 0, // I2C Read/Write Request
  I2CResponse = 1, // I2C Response
}
*/
union PacketContents { I2CRWRequest, I2CResponse, StatusRequest, StatusResponse }

table Packet {
  version_major:uint8=0;
  version_minor:uint8=1;
  //type:PacketType; // Type of packet
  contents:PacketContents;
}

root_type Packet;