import flatbuffers
from cobs import cobs
import serial
import struct

# Generated by `flatc`.
import bpio.ConfigurationRequest as ConfigurationRequest
import bpio.ConfigurationResponse as ConfigurationResponse
import bpio.DataRequest as DataRequest
import bpio.DataResponse as DataResponse
import bpio.ModeConfiguration as ModeConfiguration
import bpio.RequestPacket as RequestPacket
import bpio.RequestPacketContents as RequestPacketContents
import bpio.ResponsePacket as ResponsePacket
import bpio.ResponsePacketContents as ResponsePacketContents
import bpio.StatusRequest as StatusRequest
import bpio.StatusRequestTypes as StatusRequestTypes
import bpio.StatusResponse as StatusResponse
import bpio.ErrorResponse as ErrorResponse
import time 

class BPIOClient:
    def __init__(self, port, baudrate=3000000, timeout=2, debug=False):
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        self.debug = debug
        self.serial_port = None
        
        # Open serial port
        try:
            self.serial_port = serial.Serial(self.port, self.baudrate, timeout=self.timeout)
            if self.debug:
                print(f"Opened serial port {self.port} at {self.baudrate} baud")
        except serial.SerialException as e:
            print(f"Failed to open serial port {self.port}: {e}")
            print("Make sure the serial port exists and is not in use by another application")
            raise
        except Exception as e:
            print(f"Error opening serial port: {e}")
            raise
    
    def __enter__(self):
        """Context manager entry"""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        self.close()
    
    def close(self):
        """Close the serial port"""
        if self.serial_port and self.serial_port.is_open:
            self.serial_port.close()
            if self.debug:
                print(f"Closed serial port {self.port}")
    
    def __del__(self):
        """Destructor - ensure port is closed"""
        self.close()
        
    def send_and_receive(self, data):
        """Send COBS-encoded data to serial port and receive COBS-encoded response"""
        if not self.serial_port or not self.serial_port.is_open:
            print("Serial port is not open")
            return None
            
        try:
            # COBS encode the data
            encoded_data = cobs.encode(data)
            
            # Clear any pending data
            self.serial_port.reset_input_buffer()
            self.serial_port.reset_output_buffer()
            
            # Send COBS-encoded data followed by delimiter (0x00)
            packet = cobs.encode(data) + b'\x00'
            self.serial_port.write(packet)
            
            if self.debug:
                print(f"Sent {len(data)} bytes (original data)")
                print(f"Sent {len(encoded_data)} bytes (COBS encoded)")
                print(f"Total bytes sent: {len(encoded_data) + 1} (including delimiter)")

            # Read response until we get the delimiter (0x00) - most efficient
            resp_encoded = bytearray()
            timeout_start = time.time()

            while True:
                # Read all available data at once
                available = self.serial_port.in_waiting
                if available > 0:
                    chunk = self.serial_port.read(available)
                    resp_encoded.extend(chunk)
                    
                    # Check if we have the complete message (contains delimiter)
                    delimiter_pos = resp_encoded.find(b'\x00')
                    if delimiter_pos != -1:
                        # Found delimiter, truncate at delimiter position
                        resp_encoded = resp_encoded[:delimiter_pos]
                        break
                else:
                    # No data available, check timeout
                    if time.time() - timeout_start > self.timeout:
                        print("Timeout waiting for response")
                        return None
                    time.sleep(0.001)  # Small delay to prevent busy waiting

            # Convert back to bytes
            resp_encoded = bytes(resp_encoded)
            
            if len(resp_encoded) == 0:
                print("No response data received")
                return None
                
            if self.debug:
                print(f"Received {len(resp_encoded)} bytes (COBS encoded)")
            
            # COBS decode the response
            try:
                resp_data = cobs.decode(resp_encoded)
                if self.debug:
                    print(f"Decoded {len(resp_data)} bytes")
                return resp_data
            except cobs.DecodeError as e:
                print(f"COBS decode error: {e}")
                return None

        except serial.SerialException as e:
            print(f"Serial communication error: {e}")
        except Exception as e:
            print(f"Error: {e}")
        return None
    
    def _expected_response(self, request_type):
        """Get the expected response type for a given request type"""
        if request_type == RequestPacketContents.RequestPacketContents.ConfigurationRequest:
            return ResponsePacketContents.ResponsePacketContents.ConfigurationResponse
        elif request_type == RequestPacketContents.RequestPacketContents.DataRequest:
            return ResponsePacketContents.ResponsePacketContents.DataResponse
        elif request_type == RequestPacketContents.RequestPacketContents.StatusRequest:
            return ResponsePacketContents.ResponsePacketContents.StatusResponse
        else:
            return None

    def send_request(self, builder, request_contents_type, request_contents):
        """Send a request packet and return the response"""
        """Wrap contents in a RequestPacket"""
        RequestPacket.Start(builder)
        RequestPacket.AddContentsType(builder, request_contents_type)
        RequestPacket.AddContents(builder, request_contents)
        final_packet = RequestPacket.End(builder)
        builder.Finish(final_packet)
        data = builder.Output()
    
        resp_data = self.send_and_receive(data)

        if not resp_data:
            return False

        # Decode response packet
        resp_packet = ResponsePacket.ResponsePacket.GetRootAsResponsePacket(resp_data, 0)
        response_contents_type = resp_packet.ContentsType()
        if self.debug:
            print(f"ContentsType: {response_contents_type}")        

        if response_contents_type == ResponsePacketContents.ResponsePacketContents.ErrorResponse:
            error_resp = ErrorResponse.ErrorResponse()
            error_resp.Init(resp_packet.Contents().Bytes, resp_packet.Contents().Pos)
            print(f"Error: {error_resp.Error().decode('utf-8')}")
            return False
        
        expected_type = self._expected_response(request_contents_type)        
        if response_contents_type != expected_type:
            print(f"Unexpected response type: {response_contents_type}")
            return False

        return resp_packet
    
    def configuration_request(self, **kwargs):
        """Create a BPIO ConfigurationRequest packet"""
        builder = flatbuffers.Builder(1024)

        mode_string = None
        if 'mode' in kwargs:
            mode_string = builder.CreateString(kwargs['mode'])

        mode_config = None
        if 'mode_configuration' in kwargs:
            config_args = kwargs['mode_configuration']
            # Create a ModeConfiguration
            ModeConfiguration.Start(builder)
            if 'speed' in config_args:
                ModeConfiguration.AddSpeed(builder, config_args['speed'])
            else:
                ModeConfiguration.AddSpeed(builder, 20000)  # Default speed
            if 'data_bits' in config_args:
                ModeConfiguration.AddDataBits(builder, config_args['data_bits'])
            if 'parity' in config_args:
                ModeConfiguration.AddParity(builder, config_args['parity'])
            if 'stop_bits' in config_args:
                ModeConfiguration.AddStopBits(builder, config_args['stop_bits'])
            if 'flow_control' in config_args:
                ModeConfiguration.AddFlowControl(builder, config_args['flow_control'])
            if 'signal_inversion' in config_args:
                ModeConfiguration.AddSignalInversion(builder, config_args['signal_inversion'])
            if 'clock_stretch' in config_args:
                ModeConfiguration.AddClockStretch(builder, config_args['clock_stretch'])
            if 'clock_polarity' in config_args:
                ModeConfiguration.AddClockPolarity(builder, config_args['clock_polarity'])
            if 'clock_phase' in config_args:
                ModeConfiguration.AddClockPhase(builder, config_args['clock_phase'])
            if 'chip_select_idle' in config_args:
                ModeConfiguration.AddChipSelectIdle(builder, config_args['chip_select_idle'])
            if 'submode' in config_args:
                ModeConfiguration.AddSubmode(builder, config_args['submode'])
            if 'tx_modulation' in config_args:
                ModeConfiguration.AddTxModulation(builder, config_args['tx_modulation'])
            if 'rx_sensor' in config_args:
                ModeConfiguration.AddRxSensor(builder, config_args['rx_sensor'])
            mode_config = ModeConfiguration.End(builder)

        print_string = None
        if 'print_string' in kwargs:
            print_string = builder.CreateString(kwargs['print_string'])

        led_color_vector = None
        if 'led_color' in kwargs:
            led_colors = kwargs['led_color']
            ConfigurationRequest.StartLedColorVector(builder, len(led_colors))
            for color in reversed(led_colors):
                builder.PrependUint32(color)
            led_color_vector = builder.EndVector()    
        
        ConfigurationRequest.Start(builder)
        # Check if each key exists in kwargs and add it to the request
        if 'mode' in kwargs:
            ConfigurationRequest.AddMode(builder, mode_string)
        if 'mode_configuration' in kwargs:
            ConfigurationRequest.AddModeConfiguration(builder, mode_config)
        if 'mode_bitorder_msb' in kwargs:
            ConfigurationRequest.AddModeBitorderMsb(builder, kwargs['mode_bitorder_msb'])
        if 'mode_bitorder_lsb' in kwargs:
            ConfigurationRequest.AddModeBitorderLsb(builder, kwargs['mode_bitorder_lsb'])
        if 'psu_disable' in kwargs:
            ConfigurationRequest.AddPsuDisable(builder, kwargs['psu_disable'])
        if 'psu_enable' in kwargs:
            ConfigurationRequest.AddPsuEnable(builder, kwargs['psu_enable'])
        if 'psu_set_mv' in kwargs:
            ConfigurationRequest.AddPsuSetMv(builder, kwargs['psu_set_mv'])
        if 'psu_set_ma' in kwargs:
            ConfigurationRequest.AddPsuSetMa(builder, kwargs['psu_set_ma'])
        if 'pullup_disable' in kwargs:
            ConfigurationRequest.AddPullupDisable(builder, kwargs['pullup_disable'])
        if 'pullup_enable' in kwargs:
            ConfigurationRequest.AddPullupEnable(builder, kwargs['pullup_enable'])
        if 'pullx_config' in kwargs:
            ConfigurationRequest.AddPullxConfig(builder, kwargs['pullx_config'])
        if 'io_direction_mask' in kwargs:
            ConfigurationRequest.AddIoDirectionMask(builder, kwargs['io_direction_mask'])
        if 'io_direction' in kwargs:
            ConfigurationRequest.AddIoDirection(builder, kwargs['io_direction'])
        if 'io_value_mask' in kwargs:
            ConfigurationRequest.AddIoValueMask(builder, kwargs['io_value_mask'])
        if 'io_value' in kwargs:
            ConfigurationRequest.AddIoValue(builder, kwargs['io_value'])
        if 'led_resume' in kwargs:  
            ConfigurationRequest.AddLedResume(builder, kwargs['led_resume'])    
        if 'led_color' in kwargs:       
            ConfigurationRequest.AddLedColor(builder, led_color_vector) 
        if 'print_string' in kwargs:
            ConfigurationRequest.AddPrintString(builder, print_string)
        if 'hardware_bootloader' in kwargs:
            ConfigurationRequest.AddHardwareBootloader(builder, kwargs['hardware_bootloader'])
        if 'hardware_reset' in kwargs:
            ConfigurationRequest.AddHardwareReset(builder, kwargs['hardware_reset'])

        config_request = ConfigurationRequest.End(builder)
        resp_packet = self.send_request(builder, RequestPacketContents.RequestPacketContents.ConfigurationRequest, config_request)
        
        if not resp_packet:
            return False

        config_resp = ConfigurationResponse.ConfigurationResponse()
        config_resp.Init(resp_packet.Contents().Bytes, resp_packet.Contents().Pos)
        
        if config_resp.Error():
            print(f"Configuration error: {config_resp.Error().decode('utf-8')}")
            return False
        
        return True

    def status_request(self, **kwargs):
        """Create a BPIO StatusRequest packet"""
        builder = flatbuffers.Builder(1024)

        # Create the query vector BEFORE starting the StatusRequest table
        StatusRequest.StartQueryVector(builder, 1)
        builder.PrependUint8(StatusRequestTypes.StatusRequestTypes.All)
        #builder.PrependUint8(StatusRequestTypes.StatusRequestTypes.Version)
        query_vector = builder.EndVector()

        # Create a StatusRequest
        StatusRequest.Start(builder)
        StatusRequest.AddQuery(builder, query_vector)
        status_request = StatusRequest.End(builder)
        resp_packet = self.send_request(builder, RequestPacketContents.RequestPacketContents.StatusRequest, status_request)
        
        if not resp_packet:
            return None
            
        status_resp = StatusResponse.StatusResponse()
        status_resp.Init(resp_packet.Contents().Bytes, resp_packet.Contents().Pos)

        # copy the status response into a dictionary
        status_dict = {
            'error': status_resp.Error().decode('utf-8') if status_resp.Error() else None,
            'hardware_version_major': status_resp.HardwareVersionMajor(),
            'hardware_version_minor': status_resp.HardwareVersionMinor(),
            'firmware_version_major': status_resp.FirmwareVersionMajor(),
            'firmware_version_minor': status_resp.FirmwareVersionMinor(),
            'firmware_git_hash': status_resp.FirmwareGitHash().decode('utf-8'),
            'firmware_date': status_resp.FirmwareDate().decode('utf-8'),
            'modes_available': [status_resp.ModesAvailable(i).decode('utf-8') for i in range(status_resp.ModesAvailableLength())],
            'mode_current': status_resp.ModeCurrent().decode('utf-8') if status_resp.ModeCurrent() else None,
            'mode_pin_labels': [status_resp.ModePinLabels(i).decode('utf-8') for i in range(status_resp.ModePinLabelsLength())],
            'mode_bitorder_msb': status_resp.ModeBitorderMsb(),
            'psu_enabled': status_resp.PsuEnabled(),
            'psu_set_mv': status_resp.PsuSetMv(),
            'psu_set_ma': status_resp.PsuSetMa(),
            'psu_measured_mv': status_resp.PsuMeasuredMv(),
            'psu_measured_ma': status_resp.PsuMeasuredMa(),
            'psu_current_error': status_resp.PsuCurrentError(),
            'pullup_enabled': status_resp.PullupEnabled(),
            'pullx_config': status_resp.PullxConfig(),
            'adc_mv': [status_resp.AdcMv(i) for i in range(status_resp.AdcMvLength())],
            'io_direction': status_resp.IoDirection(),
            'io_value': status_resp.IoValue(),
            'disk_size_mb': status_resp.DiskSizeMb(),
            'disk_used_mb': status_resp.DiskUsedMb(),
            'led_count': status_resp.LedCount()
        }

        return status_dict
    
    def print_status_response(self, status_dict):
        """Parse and display status response from dictionary"""
        print("StatusResponse:")
        
        if status_dict.get('error'):
            print(f"  Error: {status_dict['error']}")
            return
        
        print(f"  Hardware version: {status_dict['hardware_version_major']} REV{status_dict['hardware_version_minor']}")
        print(f"  Firmware version: {status_dict['firmware_version_major']}.{status_dict['firmware_version_minor']}")
        print(f"  Firmware git hash: {status_dict['firmware_git_hash']}")
        print(f"  Firmware date: {status_dict['firmware_date']}")

        if status_dict['modes_available']:
            print(f"  Available modes: {', '.join(status_dict['modes_available'])}")

        if status_dict['mode_current']:
            print(f"  Current mode: {status_dict['mode_current']}")

        print(f"  Mode bit order: {'MSB' if status_dict['mode_bitorder_msb'] else 'LSB'}")

        if status_dict['mode_pin_labels']:
            print(f"  Pin labels: {', '.join(status_dict['mode_pin_labels'])}")

        if status_dict['led_count']:
            print(f"  Number of LEDs: {status_dict['led_count']}")

        print(f"  Pull-up resistors enabled: {status_dict['pullup_enabled']}")
        print(f"  Power supply enabled: {status_dict['psu_enabled']}")
        print(f"  PSU set voltage: {status_dict['psu_set_mv']} mV")
        print(f"  PSU set current: {status_dict['psu_set_ma']} mA")
        print(f"  PSU measured voltage: {status_dict['psu_measured_mv']} mV")
        print(f"  PSU measured current: {status_dict['psu_measured_ma']} mA")        
        print(f"  PSU over current error: {'Yes' if status_dict['psu_current_error'] else 'No'}")

        if status_dict['adc_mv']:
            adc_values = [str(mv) for mv in status_dict['adc_mv']]
            print(f"  IO ADC values (mV): {', '.join(adc_values)}")

        # Print IO pin directions and values
        io_direction_byte = status_dict['io_direction']
        directions = []
        for i in range(8):
            bit_value = (io_direction_byte >> i) & 1
            direction = 'OUT' if bit_value else 'IN'
            directions.append(f"IO{i}:{direction}")
        print(f"  IO directions: {', '.join(directions)}")

        io_value_byte = status_dict['io_value']
        values = []
        for i in range(8):
            bit_value = (io_value_byte >> i) & 1
            value = 'HIGH' if bit_value else 'LOW'
            values.append(f"IO{i}:{value}")
        print(f"  IO values: {', '.join(values)}")

        print(f"  Disk size: {status_dict['disk_size_mb']} MB")
        print(f"  Disk space used: {status_dict['disk_used_mb']} MB")
    
    def show_status(self):
        """Get and print status information"""
        status_dict = self.status_request()
        if status_dict:
            self.print_status_response(status_dict)
        else:
            print("Failed to get status information.")

    def data_request(self, start_main=False, start_alt=False, data_write=None, bytes_read=0, stop_main=False, stop_alt=False):
        """Create a BPIO DataRequest packet"""
        builder = flatbuffers.Builder(1024)

        data_write_vector = None
        if data_write and len(data_write) > 0:
            data_write_vector = builder.CreateByteVector(bytes(data_write))

        # Create a DataRequest
        DataRequest.Start(builder)
        if start_main:
            DataRequest.AddStartMain(builder, True)
        if start_alt:
            DataRequest.AddStartAlt(builder, True)
        if data_write_vector:
            DataRequest.AddDataWrite(builder, data_write_vector)
        if bytes_read is not None:
            DataRequest.AddBytesRead(builder, bytes_read)
        if stop_main:
            DataRequest.AddStopMain(builder, True)
        if stop_alt:
            DataRequest.AddStopAlt(builder, True)

        data_request = DataRequest.End(builder)
        resp_packet = self.send_request(builder, RequestPacketContents.RequestPacketContents.DataRequest, data_request)
        
        if not resp_packet:
            return None
                    
        data_resp = DataResponse.DataResponse()
        data_resp.Init(resp_packet.Contents().Bytes, resp_packet.Contents().Pos)
        
        if data_resp.Error():
            if self.debug: print(f"Data request error: {data_resp.Error().decode('utf-8')}")
            return None

        # Return data read, if any
        if data_resp.DataReadLength() > 0:
            data_bytes = data_resp.DataReadAsNumpy()
            if self.debug:  print(f"Data read: {' '.join(f'{b:02x}' for b in data_bytes)}")
            return data_bytes.tobytes()
            
        return b''