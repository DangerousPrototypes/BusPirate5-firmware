;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
;
; Copyright (c) 2021 mjcross
;
; SPDX-License-Identifier: BSD-3-Clause
;
; Modified by Ian Lesnet for the Bus Pirate project (c) 2024
;
.pio_version 0 // only requires PIO version 0

.program rc5_carrier
.define NUM_CYCLES 32               ; how many carrier cycles to generate
.define BURST_IRQ 7                 ; which IRQ should trigger a carrier burst
.define public TICKS_PER_LOOP 4     ; the number of instructions in the loop (for timing)

.wrap_target
    set x, (NUM_CYCLES - 1)         ; initialize the loop counter
    wait 1 irq BURST_IRQ            ; wait for the IRQ then clear it
cycle_loop:
    set pins, 1 [1]               ; set the pin high (2 cycle)
    set pins, 0                  ; set the pin low (1 + 1 cycles)
    jmp x--, cycle_loop            
.wrap


% c-sdk {
static inline void rc5_carrier_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    // Create a new state machine configuration
    //
    pio_sm_config c = rc5_carrier_program_get_default_config (offset);

    // Map the SET pin group to one pin, namely the `pin`
    // parameter to this function.
    //
    sm_config_set_set_pins (&c, pin, 1);

    // Set the GPIO function of the pin (connect the PIO to the pad)
    //
    pio_gpio_init (pio, pin);

    // Set the pin direction to input at the PIO
    //
    pio_sm_set_consecutive_pindirs (pio, sm, pin, 1, true);

    // Set the clock divider to generate the required frequency
    //
    float div = clock_get_hz (clk_sys) / (freq * rc5_carrier_TICKS_PER_LOOP);
    sm_config_set_clkdiv (&c, div);

    // Apply the configuration to the state machine
    //
    pio_sm_init (pio, sm, offset, &c);

    // Set the state machine running
    //
    pio_sm_set_enabled (pio, sm, true);
}
%}

.program manchester_tx
.side_set 1 opt

; Transmit one bit every 16 cycles. a '0' is encoded as a high-low sequence
; (each part lasting half a bit period, or 6 cycles) and a '1' is encoded as a
; low-high sequence.
;
; Autopull must be enabled -- this program does not care about the threshold.
; The program starts at the public label 'start'.
.define BURST_IRQ 7                     ; the IRQ used to trigger a carrier burst
.define public TICKS_PER_LOOP 16         ; the number of instructions in the loop (for timing)
.define public NUM_BITS 14               ; the number of bits to transmit per frame
.wrap_target
do_1:
    nop [7]                 ; low 6 cycles
    irq BURST_IRQ [4]       ; high 6 cycles (1 + 2 + 1 + 2 = 6 cycles high)
    jmp get_bit             ; 
do_0:
    irq BURST_IRQ [7]       ; high 6 cycles
    nop [5]                 ; low 6 cycles (1 + 3 + 2 = 6 cycles low)
public start:
get_bit:
    out x, 1               ; Always shift out one bit from OSR to X, so we can
    jmp !x do_0            ; branch on it. Autopull refills the OSR when empty.
.wrap

% c-sdk {
static inline void manchester_tx_program_init(PIO pio, uint sm, uint offset, float freq) {
    //pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);
    //pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    //pio_gpio_init(pio, pin);

    pio_sm_config c = manchester_tx_program_get_default_config(offset);
    //sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_out_shift(&c, false, true, manchester_tx_NUM_BITS);
    //sm_config_set_clkdiv(&c, div);
    // Set the clock divider to generate the required frequency
    //
    float div = clock_get_hz (clk_sys) / (freq * manchester_tx_TICKS_PER_LOOP);
    sm_config_set_clkdiv (&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

.program manchester_rx

; Assumes line is idle low, first bit is 0
; One bit is 16 cycles
; a '0' is encoded as 10 
; a '1' is encoded as 01
;
; Both the IN base and the JMP pin mapping must be pointed at the GPIO used for RX.
; Autopush must be enabled.
; Before enabling the SM, it should be placed in a 'wait 1, pin` state, so that
; it will not start sampling until the initial line idle state ends.
.define public TICKS_PER_LOOP 16         ; the number of instructions in the loop (for timing) **2samples per bit = 16 not 8**
.define public NUM_BITS 14               ; the number of bits to receive per frame
.wrap_target
get_bit:
    in pins, 1 [6]       ; Read the bit, sleep 3/4 of a bit
    jmp y-- get_bit      ; collect all the bits
public entry_point:
    set y ((NUM_BITS*2)-2)  ; initialize the bit counter, with some delay to avoid triggering on previous bit
    in x, 1             ; Insert the invisible first half of the start bit
    wait 0 pin 0 [2]       ; Wait for the 1->0 transition - this is the middle of the start bit   
.wrap


% c-sdk {
static inline void manchester_rx_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);

    pio_sm_config c = manchester_rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT
    sm_config_set_jmp_pin(&c, pin); // for JMP
    sm_config_set_in_shift(&c, false, true, (manchester_rx_NUM_BITS*2));
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    //sm_config_set_clkdiv(&c, div);
    float div = clock_get_hz (clk_sys) / (freq * manchester_rx_TICKS_PER_LOOP);
    sm_config_set_clkdiv (&c, div);
    

    // X and Y are set to 0 and 1, to conveniently emit these to ISR/FIFO.
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 1));
    //pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));
    // Assume line is idle low, and first transmitted bit is 0. Put SM in a
    // wait state before enabling. RX will begin once the first 0 symbol is
    // detected.
    //pio_sm_exec(pio, sm, pio_encode_wait_pin(0, 0) | pio_encode_delay(2));
    pio_sm_init(pio, sm, offset + manchester_rx_offset_entry_point, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
