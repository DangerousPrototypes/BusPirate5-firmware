# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bpio

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConfigurationRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConfigurationRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConfigurationRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConfigurationRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConfigurationRequest
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConfigurationRequest
    def ModeConfiguration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from bpio.ModeConfiguration import ModeConfiguration
            obj = ModeConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ConfigurationRequest
    def ModeBitorderMsb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def ModeBitorderLsb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def PsuDisable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def PsuEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def PsuSetMv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ConfigurationRequest
    def PsuSetMa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 300

    # ConfigurationRequest
    def PullupDisable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def PullupEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def PullxConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ConfigurationRequest
    def IoDirectionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConfigurationRequest
    def IoDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConfigurationRequest
    def IoValueMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConfigurationRequest
    def IoValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ConfigurationRequest
    def LedResume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def LedColor(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ConfigurationRequest
    def LedColorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # ConfigurationRequest
    def LedColorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConfigurationRequest
    def LedColorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # ConfigurationRequest
    def PrintString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConfigurationRequest
    def HardwareBootloader(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConfigurationRequest
    def HardwareReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ConfigurationRequestStart(builder):
    builder.StartObject(20)

def Start(builder):
    ConfigurationRequestStart(builder)

def ConfigurationRequestAddMode(builder, mode):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mode), 0)

def AddMode(builder, mode):
    ConfigurationRequestAddMode(builder, mode)

def ConfigurationRequestAddModeConfiguration(builder, modeConfiguration):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(modeConfiguration), 0)

def AddModeConfiguration(builder, modeConfiguration):
    ConfigurationRequestAddModeConfiguration(builder, modeConfiguration)

def ConfigurationRequestAddModeBitorderMsb(builder, modeBitorderMsb):
    builder.PrependBoolSlot(2, modeBitorderMsb, 0)

def AddModeBitorderMsb(builder, modeBitorderMsb):
    ConfigurationRequestAddModeBitorderMsb(builder, modeBitorderMsb)

def ConfigurationRequestAddModeBitorderLsb(builder, modeBitorderLsb):
    builder.PrependBoolSlot(3, modeBitorderLsb, 0)

def AddModeBitorderLsb(builder, modeBitorderLsb):
    ConfigurationRequestAddModeBitorderLsb(builder, modeBitorderLsb)

def ConfigurationRequestAddPsuDisable(builder, psuDisable):
    builder.PrependBoolSlot(4, psuDisable, 0)

def AddPsuDisable(builder, psuDisable):
    ConfigurationRequestAddPsuDisable(builder, psuDisable)

def ConfigurationRequestAddPsuEnable(builder, psuEnable):
    builder.PrependBoolSlot(5, psuEnable, 0)

def AddPsuEnable(builder, psuEnable):
    ConfigurationRequestAddPsuEnable(builder, psuEnable)

def ConfigurationRequestAddPsuSetMv(builder, psuSetMv):
    builder.PrependUint32Slot(6, psuSetMv, 0)

def AddPsuSetMv(builder, psuSetMv):
    ConfigurationRequestAddPsuSetMv(builder, psuSetMv)

def ConfigurationRequestAddPsuSetMa(builder, psuSetMa):
    builder.PrependUint16Slot(7, psuSetMa, 300)

def AddPsuSetMa(builder, psuSetMa):
    ConfigurationRequestAddPsuSetMa(builder, psuSetMa)

def ConfigurationRequestAddPullupDisable(builder, pullupDisable):
    builder.PrependBoolSlot(8, pullupDisable, 0)

def AddPullupDisable(builder, pullupDisable):
    ConfigurationRequestAddPullupDisable(builder, pullupDisable)

def ConfigurationRequestAddPullupEnable(builder, pullupEnable):
    builder.PrependBoolSlot(9, pullupEnable, 0)

def AddPullupEnable(builder, pullupEnable):
    ConfigurationRequestAddPullupEnable(builder, pullupEnable)

def ConfigurationRequestAddPullxConfig(builder, pullxConfig):
    builder.PrependUint32Slot(10, pullxConfig, 0)

def AddPullxConfig(builder, pullxConfig):
    ConfigurationRequestAddPullxConfig(builder, pullxConfig)

def ConfigurationRequestAddIoDirectionMask(builder, ioDirectionMask):
    builder.PrependUint8Slot(11, ioDirectionMask, 0)

def AddIoDirectionMask(builder, ioDirectionMask):
    ConfigurationRequestAddIoDirectionMask(builder, ioDirectionMask)

def ConfigurationRequestAddIoDirection(builder, ioDirection):
    builder.PrependUint8Slot(12, ioDirection, 0)

def AddIoDirection(builder, ioDirection):
    ConfigurationRequestAddIoDirection(builder, ioDirection)

def ConfigurationRequestAddIoValueMask(builder, ioValueMask):
    builder.PrependUint8Slot(13, ioValueMask, 0)

def AddIoValueMask(builder, ioValueMask):
    ConfigurationRequestAddIoValueMask(builder, ioValueMask)

def ConfigurationRequestAddIoValue(builder, ioValue):
    builder.PrependUint8Slot(14, ioValue, 0)

def AddIoValue(builder, ioValue):
    ConfigurationRequestAddIoValue(builder, ioValue)

def ConfigurationRequestAddLedResume(builder, ledResume):
    builder.PrependBoolSlot(15, ledResume, 0)

def AddLedResume(builder, ledResume):
    ConfigurationRequestAddLedResume(builder, ledResume)

def ConfigurationRequestAddLedColor(builder, ledColor):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(ledColor), 0)

def AddLedColor(builder, ledColor):
    ConfigurationRequestAddLedColor(builder, ledColor)

def ConfigurationRequestStartLedColorVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLedColorVector(builder, numElems):
    return ConfigurationRequestStartLedColorVector(builder, numElems)

def ConfigurationRequestAddPrintString(builder, printString):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(printString), 0)

def AddPrintString(builder, printString):
    ConfigurationRequestAddPrintString(builder, printString)

def ConfigurationRequestAddHardwareBootloader(builder, hardwareBootloader):
    builder.PrependBoolSlot(18, hardwareBootloader, 0)

def AddHardwareBootloader(builder, hardwareBootloader):
    ConfigurationRequestAddHardwareBootloader(builder, hardwareBootloader)

def ConfigurationRequestAddHardwareReset(builder, hardwareReset):
    builder.PrependBoolSlot(19, hardwareReset, 0)

def AddHardwareReset(builder, hardwareReset):
    ConfigurationRequestAddHardwareReset(builder, hardwareReset)

def ConfigurationRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConfigurationRequestEnd(builder)
