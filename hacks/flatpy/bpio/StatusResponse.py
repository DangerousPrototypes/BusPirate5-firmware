# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bpio

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatusResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatusResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatusResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatusResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatusResponse
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StatusResponse
    def HardwareVersionMajor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def HardwareVersionMinor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def FirmwareVersionMajor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def FirmwareVersionMinor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def FirmwareGitHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StatusResponse
    def FirmwareDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StatusResponse
    def ModesAvailable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # StatusResponse
    def ModesAvailableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatusResponse
    def ModesAvailableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # StatusResponse
    def ModeCurrent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StatusResponse
    def ModePinLabels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # StatusResponse
    def ModePinLabelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatusResponse
    def ModePinLabelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # StatusResponse
    def ModeBitorderMsb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StatusResponse
    def PsuEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StatusResponse
    def PsuSetMv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def PsuSetMa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def PsuMeasuredMv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def PsuMeasuredMa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def PsuCurrentError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StatusResponse
    def PullupEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StatusResponse
    def PullxConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def AdcMv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StatusResponse
    def AdcMvAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # StatusResponse
    def AdcMvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StatusResponse
    def AdcMvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # StatusResponse
    def IoDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def IoValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # StatusResponse
    def DiskSizeMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StatusResponse
    def DiskUsedMb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # StatusResponse
    def LedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def StatusResponseStart(builder):
    builder.StartObject(25)

def Start(builder):
    StatusResponseStart(builder)

def StatusResponseAddError(builder, error):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(error), 0)

def AddError(builder, error):
    StatusResponseAddError(builder, error)

def StatusResponseAddHardwareVersionMajor(builder, hardwareVersionMajor):
    builder.PrependUint8Slot(1, hardwareVersionMajor, 0)

def AddHardwareVersionMajor(builder, hardwareVersionMajor):
    StatusResponseAddHardwareVersionMajor(builder, hardwareVersionMajor)

def StatusResponseAddHardwareVersionMinor(builder, hardwareVersionMinor):
    builder.PrependUint8Slot(2, hardwareVersionMinor, 0)

def AddHardwareVersionMinor(builder, hardwareVersionMinor):
    StatusResponseAddHardwareVersionMinor(builder, hardwareVersionMinor)

def StatusResponseAddFirmwareVersionMajor(builder, firmwareVersionMajor):
    builder.PrependUint8Slot(3, firmwareVersionMajor, 0)

def AddFirmwareVersionMajor(builder, firmwareVersionMajor):
    StatusResponseAddFirmwareVersionMajor(builder, firmwareVersionMajor)

def StatusResponseAddFirmwareVersionMinor(builder, firmwareVersionMinor):
    builder.PrependUint8Slot(4, firmwareVersionMinor, 0)

def AddFirmwareVersionMinor(builder, firmwareVersionMinor):
    StatusResponseAddFirmwareVersionMinor(builder, firmwareVersionMinor)

def StatusResponseAddFirmwareGitHash(builder, firmwareGitHash):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(firmwareGitHash), 0)

def AddFirmwareGitHash(builder, firmwareGitHash):
    StatusResponseAddFirmwareGitHash(builder, firmwareGitHash)

def StatusResponseAddFirmwareDate(builder, firmwareDate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(firmwareDate), 0)

def AddFirmwareDate(builder, firmwareDate):
    StatusResponseAddFirmwareDate(builder, firmwareDate)

def StatusResponseAddModesAvailable(builder, modesAvailable):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(modesAvailable), 0)

def AddModesAvailable(builder, modesAvailable):
    StatusResponseAddModesAvailable(builder, modesAvailable)

def StatusResponseStartModesAvailableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartModesAvailableVector(builder, numElems):
    return StatusResponseStartModesAvailableVector(builder, numElems)

def StatusResponseAddModeCurrent(builder, modeCurrent):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(modeCurrent), 0)

def AddModeCurrent(builder, modeCurrent):
    StatusResponseAddModeCurrent(builder, modeCurrent)

def StatusResponseAddModePinLabels(builder, modePinLabels):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(modePinLabels), 0)

def AddModePinLabels(builder, modePinLabels):
    StatusResponseAddModePinLabels(builder, modePinLabels)

def StatusResponseStartModePinLabelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartModePinLabelsVector(builder, numElems):
    return StatusResponseStartModePinLabelsVector(builder, numElems)

def StatusResponseAddModeBitorderMsb(builder, modeBitorderMsb):
    builder.PrependBoolSlot(10, modeBitorderMsb, 0)

def AddModeBitorderMsb(builder, modeBitorderMsb):
    StatusResponseAddModeBitorderMsb(builder, modeBitorderMsb)

def StatusResponseAddPsuEnabled(builder, psuEnabled):
    builder.PrependBoolSlot(11, psuEnabled, 0)

def AddPsuEnabled(builder, psuEnabled):
    StatusResponseAddPsuEnabled(builder, psuEnabled)

def StatusResponseAddPsuSetMv(builder, psuSetMv):
    builder.PrependUint32Slot(12, psuSetMv, 0)

def AddPsuSetMv(builder, psuSetMv):
    StatusResponseAddPsuSetMv(builder, psuSetMv)

def StatusResponseAddPsuSetMa(builder, psuSetMa):
    builder.PrependUint32Slot(13, psuSetMa, 0)

def AddPsuSetMa(builder, psuSetMa):
    StatusResponseAddPsuSetMa(builder, psuSetMa)

def StatusResponseAddPsuMeasuredMv(builder, psuMeasuredMv):
    builder.PrependUint32Slot(14, psuMeasuredMv, 0)

def AddPsuMeasuredMv(builder, psuMeasuredMv):
    StatusResponseAddPsuMeasuredMv(builder, psuMeasuredMv)

def StatusResponseAddPsuMeasuredMa(builder, psuMeasuredMa):
    builder.PrependUint32Slot(15, psuMeasuredMa, 0)

def AddPsuMeasuredMa(builder, psuMeasuredMa):
    StatusResponseAddPsuMeasuredMa(builder, psuMeasuredMa)

def StatusResponseAddPsuCurrentError(builder, psuCurrentError):
    builder.PrependBoolSlot(16, psuCurrentError, 0)

def AddPsuCurrentError(builder, psuCurrentError):
    StatusResponseAddPsuCurrentError(builder, psuCurrentError)

def StatusResponseAddPullupEnabled(builder, pullupEnabled):
    builder.PrependBoolSlot(17, pullupEnabled, 0)

def AddPullupEnabled(builder, pullupEnabled):
    StatusResponseAddPullupEnabled(builder, pullupEnabled)

def StatusResponseAddPullxConfig(builder, pullxConfig):
    builder.PrependUint32Slot(18, pullxConfig, 0)

def AddPullxConfig(builder, pullxConfig):
    StatusResponseAddPullxConfig(builder, pullxConfig)

def StatusResponseAddAdcMv(builder, adcMv):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(adcMv), 0)

def AddAdcMv(builder, adcMv):
    StatusResponseAddAdcMv(builder, adcMv)

def StatusResponseStartAdcMvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAdcMvVector(builder, numElems):
    return StatusResponseStartAdcMvVector(builder, numElems)

def StatusResponseAddIoDirection(builder, ioDirection):
    builder.PrependUint8Slot(20, ioDirection, 0)

def AddIoDirection(builder, ioDirection):
    StatusResponseAddIoDirection(builder, ioDirection)

def StatusResponseAddIoValue(builder, ioValue):
    builder.PrependUint8Slot(21, ioValue, 0)

def AddIoValue(builder, ioValue):
    StatusResponseAddIoValue(builder, ioValue)

def StatusResponseAddDiskSizeMb(builder, diskSizeMb):
    builder.PrependFloat32Slot(22, diskSizeMb, 0.0)

def AddDiskSizeMb(builder, diskSizeMb):
    StatusResponseAddDiskSizeMb(builder, diskSizeMb)

def StatusResponseAddDiskUsedMb(builder, diskUsedMb):
    builder.PrependFloat32Slot(23, diskUsedMb, 0.0)

def AddDiskUsedMb(builder, diskUsedMb):
    StatusResponseAddDiskUsedMb(builder, diskUsedMb)

def StatusResponseAddLedCount(builder, ledCount):
    builder.PrependUint8Slot(24, ledCount, 0)

def AddLedCount(builder, ledCount):
    StatusResponseAddLedCount(builder, ledCount)

def StatusResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return StatusResponseEnd(builder)
