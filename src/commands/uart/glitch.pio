;
; PIO State Machine to handle timing and "on" time of a glitching
; device.
;

.program uart_glitch

.wrap_target
    pull                    ; get the "on" time of the glitch pulse
    mov x OSR               ; store it in X
    pull                    ; get the number of edges in the trigger character
    mov y OSR               ; store it in Y
    pull                    ; get the delay before starting glitch pulse (just hold on for now)

trigger_loop:
    wait 0 pin 0            ; idle state of TX line is high, wait for it to go low
    wait 1 pin 0            ; wait for it to go back up
    jmp y-- trigger_loop     ; decrement

    mov y OSR               ; now set the delay time to the y register

delay_loop:
    jmp y-- delay_loop      ; decrement delay before turning on the output

    set pins 1              ; OK, turn it on now

high_loop:
    jmp x-- high_loop       ; decrement the glitch pulse high time
    set pins 0              ; turn it off

.wrap

% c-sdk {
#include "hardware/clocks.h"
static inline void uart_glitch_program_init(PIO pio, uint sm, uint offset, uint glitch_pin, uint tx_pin) {
    pio_sm_config c = uart_glitch_program_get_default_config(offset);

    sm_config_set_set_pins (&c, glitch_pin, 1);
    sm_config_set_in_pins(&c, tx_pin);

    pio_gpio_init(pio, glitch_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, glitch_pin, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, tx_pin, 1, false);

    // 100MHz = 10ns per instruction
    float div = (float)clock_get_hz(clk_sys) / (100e6);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}